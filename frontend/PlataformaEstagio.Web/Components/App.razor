@using PlataformaEstagio.Web.Components.Services.Auth
@inject JwtAuthenticationStateProvider AuthProvider

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />

    <!-- CSS local do template Blazor -->
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="css/app.css" />
    <link rel="stylesheet" href="PlataformaEstagio.Web.styles.css" />

    <!-- CSS do MudBlazor -->
    <link rel="stylesheet" href="_content/MudBlazor/MudBlazor.min.css" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css?v=@(MudBlazor.Metadata.Version)" rel="stylesheet" />


    <HeadOutlet />
</head>
<body>
    <Routes @rendermode="InteractiveServer"/>

    <script src="_framework/blazor.web.js"></script>
    <!-- JS do MudBlazor -->
    <script src="_content/MudBlazor/MudBlazor.min.js?v=@(MudBlazor.Metadata.Version)"></script>
</body>
</html>

@code {
    private bool _restored;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_restored)
        {
            _restored = true;
            await AuthProvider.RestoreAsync();   // <- agora pode usar ProtectedLocalStorage
            StateHasChanged();                   // dispara re-render com usuário restaurado
        }
    }
}