@page "/empresa/vagas/nova"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using PlataformaEstagios.Communication.Requests
@using PlataformaEstagios.Domain.Enums
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IHttpClientFactory HttpFactory
@inject AuthenticationStateProvider AuthProvider
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedLocalStorage Storage
@inject IUserContext CurrentUser

<AuthorizeView Roles="Enterprise">
    <MudContainer MaxWidth="MaxWidth.Medium" Class="px-6 py-4">
        <MudPaper Class="px-4 py-4">

            <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mb-2">Criar nova vaga</MudText>

            @if (!_loaded)
            {
                <MudStack AlignItems="AlignItems.Center" Class="py-6">
                    <MudProgressCircular Indeterminate="true" />
                    <MudText Color="Color.Secondary">Carregando dados da empresa...</MudText>
                </MudStack>
            }
            else
            {
                <MudForm @ref="_form" Model="_model" OnValidSubmit="HandleSubmit">

                    <!-- Título e Descrição (já existiam) -->
                    <MudTextField @bind-Value="_model.Title"
                                  Label="Título"
                                  Required="true"
                                  For="@(() => _model.Title)" />
                    <MudTextField @bind-Value="_model.Description"
                                  Label="Descrição"
                                  Lines="6" />

                    <!-- NOVO: Localização -->
                    <MudTextField @bind-Value="_model.Location"
                                  Label="Localização"
                                  Required="true"
                                  Placeholder="Ex.: Remoto - Brasil / São Paulo - SP (Remoto)" />

                    <!-- NOVO: Área/Função (enum) -->
                    <MudSelect T="JobFunction"
                               @bind-Value="_model.JobFunction"
                               Label="Área / Função"
                               Required="true">
                        @foreach (var a in Enum.GetValues<JobFunction>())
                        {
                            if (a == JobFunction.Unknown) { continue; }
                            <MudSelectItem Value="a">@a</MudSelectItem>
                        }
                    </MudSelect>

                    <!-- NOVO: Habilidades necessárias (chips) -->
                    <MudTextField @bind-Value="_skillInput"
                                  Label="Adicionar habilidade"
                                  Placeholder="Ex.: C#, Git, SQL"
                                  OnKeyDown="OnSkillKeyDown"
                                  OnKeyDownPreventDefault="true" @* <- impede submit com Enter *@
                                  OnKeyDownStopPropagation="true" /> @* opcional: não propaga o evento *@

                    <MudChipSet T="string" Class="mb-2">
                        @foreach (var s in _model.RequiredSkills)
                        {
                            <MudChip Closeable="true" OnClose="@((MudChip<string> _) => RemoveSkill(s))">@s</MudChip>
                        }
                    </MudChipSet>

                    <!-- NOVO: Expiração -->
                    <MudDatePicker Label="Expira em"
                                   @bind-Date="_expiresDate"
                                   Editable="true"
                                   Clearable="true"
                                   DisplayMonths="1"
                                   DisableToolbar="false"D
                                   PickerMonth="@DateTime.Today"
                                   MinDate="@DateTime.Today" />

                    <!-- Ativa -->
                    <MudSwitch T="bool" @bind-Checked="_model.IsActive" Color="Color.Success">Ativa</MudSwitch>

                    <MudStack Row Spacing="2" Class="mt-3">
                        <MudButton Type="Submit"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save"
                                   Disabled="@_busy"
                                   OnClick="HandleSubmit">
                            Salvar
                        </MudButton>
                        <MudButton Variant="Variant.Text" OnClick="@(() => Nav.NavigateTo("/empresa/home"))">
                            Cancelar
                        </MudButton>
                    </MudStack>
                </MudForm>
            }
        </MudPaper>
    </MudContainer>
</AuthorizeView>

@code {
    private MudForm? _form;
    private bool _busy;
    private bool _loaded;

    // input temporário para adicionar chips
    private string _skillInput = string.Empty;

    // DatePicker trabalha melhor com DateTime? local; converto para UTC no submit
    private DateTime? _expiresDate;

    // DTO do backend (agora com novos campos)
    private RequestCreateVacancyJson _model = new()
    {
        IsActive = true,
        Location = "Remoto - Brasil",
        JobFunction = JobFunction.Unknown,
        RequiredSkills = new List<string>()
    };

    protected override async Task OnInitializedAsync()
    {
        await CurrentUser.RefreshAsync();
        _loaded = true;
    }

    private void OnSkillKeyDown(KeyboardEventArgs e)
    {
        if (e.Key is "Enter" or "," or "Tab")
        {
            AddSkillFromInput();
        }
    }

    private void AddSkillFromInput()
    {
        var txt = (_skillInput ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(txt)) return;

        // evita duplicados (case-insensitive)
        if (!_model.RequiredSkills.Any(s => string.Equals(s, txt, StringComparison.OrdinalIgnoreCase)))
            _model.RequiredSkills.Add(txt);

        _skillInput = string.Empty;
        StateHasChanged();
    }

    private void RemoveSkill(string s)
    {
        _model.RequiredSkills.Remove(s);
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        await _form!.Validate();
        if (!_form.IsValid) return;

        if (!CurrentUser.IsAuthenticated)
        {
            Snackbar.Add("Usuário não autenticado. Recarregue a página ou faça login novamente.", Severity.Error);
            return;
        }

        try
        {
            _busy = true;

            // converte Expiração (local) -> UTC para enviar
            _model.ExpiresAtUtc = _expiresDate.HasValue
                ? DateTime.SpecifyKind(_expiresDate.Value, DateTimeKind.Local).ToUniversalTime()
                : null;

            var client = HttpFactory.CreateClient("Backend");

            // (opcional) Se usa JWT armazenado:
            var tok = await Storage.GetAsync<string>("auth.token");
            if (tok.Success && !string.IsNullOrWhiteSpace(tok.Value))
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tok.Value);

            var enterpriseId = CurrentUser.UserTypeId;
            var resp = await client.PostAsJsonAsync($"api/enterprises/{enterpriseId}/vacancies", _model);

            if (resp.IsSuccessStatusCode)
            {
                Snackbar.Add("Vaga criada com sucesso!", Severity.Success);
                Nav.NavigateTo("/empresa/home");
            }
            else
            {
                var msg = await resp.Content.ReadAsStringAsync();
                Snackbar.Add($"Falha ao criar vaga: {msg}", Severity.Error);
            }
        }
        finally
        {
            _busy = false;
        }
    }
}
