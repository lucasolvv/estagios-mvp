@page "/empresa/vagas/nova"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using PlataformaEstagio.Web.Components.Services.Enterprise
@using PlataformaEstagios.Communication.Requests
@using PlataformaEstagios.Domain.Enums
@inject IEnterpriseService EnterpriseService
@inject IUserContext CurrentUser
@inject ISnackbar Snackbar
@inject NavigationManager Nav

@* <AuthorizeView Roles="Enterprise"> *@
    <MudContainer MaxWidth="MaxWidth.Medium" Class="px-6 py-4">
        <MudPaper Class="px-4 py-4">

            <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mb-2">Criar nova vaga</MudText>

            @if (!_loaded)
            {
                <MudStack AlignItems="AlignItems.Center" Class="py-6">
                    <MudProgressCircular Indeterminate="true" />
                    <MudText Color="Color.Secondary">Carregando dados da empresa...</MudText>
                </MudStack>
            }
            else
            {
                <MudForm @ref="_form" Model="_model" OnValidSubmit="HandleSubmit">

                    <!-- Título e Descrição (já existiam) -->
                    <MudTextField @bind-Value="_model.Title"
                                  Label="Título"
                                  Required="true"
                                  For="@(() => _model.Title)" />

                    <MudTextField @bind-Value="_model.Description"
                                  Label="Descrição"
                                  Lines="6" />

                    <!-- NOVO: Localização -->
                    <MudTextField @bind-Value="_model.Location"
                                  Label="Localização"
                                  Required="true"
                                  Placeholder="Ex.: Remoto - Brasil / São Paulo - SP (Remoto)" />

                    <!-- NOVO: Área/Função (enum) -->
                    <MudSelect T="JobFunction"
                               @bind-Value="_model.JobFunction"
                               Label="Área de atuação"
                               Required="true">
                        @foreach (var a in Enum.GetValues<JobFunction>())
                        {
                            
                            <MudSelectItem Value="a">@a</MudSelectItem>
                        }
                    </MudSelect>

                    <!-- NOVO: Habilidades necessárias (chips) -->
                <MudTextField @bind-Value="_skillInput"
                              Label="Adicionar habilidade"
                              Placeholder="Ex.: C#, Git, SQL"
                              OnKeyUp="OnSkillKeyUp" />

                        <MudChipSet T="string" Class="mb-2">
                            @foreach (var s in _model.RequiredSkills)
                            {
                                    <MudChip T="string"
                                             Closeable="true"
                                             OnClose="@( (MudChip<string> _) => RemoveSkill(s) )">@s</MudChip>
                            }
                        </MudChipSet>

                    <!-- NOVO: Expiração -->
                    <MudDatePicker Label="Expira em"
                                   @bind-Date="_expiresDate"
                                   Editable="true"
                                   Clearable="true"
                                   DisplayMonths="1"
                                   DisableToolbar="false"
                                   PickerMonth="@DateTime.Today"
                                   MinDate="@DateTime.Today" 
                                   T="DateTime?"
                                   />

                    <!-- Ativa -->
                    <MudSwitch T="bool" @bind-Checked="_model.IsActive" Color="Color.Success">Ativa</MudSwitch>

                    <MudStack Row Spacing="2" Class="mt-3">
                        <MudButton Type="Submit"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save"
                                   Disabled="@_busy"
                                   OnClick="HandleSubmit">
                            Salvar
                        </MudButton>
                        <MudButton Variant="Variant.Text" OnClick="@(() => Nav.NavigateTo("/empresa/home"))">
                            Cancelar
                        </MudButton>
                    </MudStack>
                </MudForm>
            }
        </MudPaper>
    </MudContainer>
@* </AuthorizeView> *@

@code {
    private MudForm? _form;
    private bool _busy;
    private bool _loaded;
    private bool _hydrated;

    // input temporário para adicionar chips
    private string _skillInput = string.Empty;

    // DatePicker trabalha melhor com DateTime? local; converto para UTC no submit
    private DateTime? _expiresDate;

    // DTO do backend (agora com novos campos)
    private RequestCreateVacancyJson _model = new()
    {
        IsActive = true,
        Location = "Remoto - Brasil",
        RequiredSkills = new List<string>(),
        JobFunction = JobFunction.TI
    };

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_hydrated && firstRender)
        {
            _hydrated = true;
            await CurrentUser.RefreshAsync();
            _loaded = true;
            StateHasChanged();
        }
    }

    private void OnSkillKeyUp(KeyboardEventArgs e)
    {
        if (e.Key is "Enter")
        {
            AddSkillFromInput();
        }
    }

    private void AddSkillFromInput()
      {
        var txt = (_skillInput ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(txt)) return;

        // evita duplicados (case-insensitive)
        
        _model.RequiredSkills.Add(txt);

        _skillInput = "";
        StateHasChanged();
    }

    private void RemoveSkill(string s)
    {
        _model.RequiredSkills.Remove(s);
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        await _form!.Validate();
        if (!_form.IsValid) return;

        if (!CurrentUser.IsAuthenticated)
        {
            Snackbar.Add("Usuário não autenticado. Recarregue a página ou faça login novamente.", Severity.Error);
            return;
        }

        try
        {
            _busy = true;

            _model.ExpiresAtUtc = _expiresDate.HasValue
                ? DateTime.SpecifyKind(_expiresDate.Value, DateTimeKind.Local).ToUniversalTime()
                : null;

            var enterpriseId = CurrentUser.UserTypeId;
            if (enterpriseId is null)
            {
                Snackbar.Add("Empresa não identificada nas claims.", Severity.Warning);
                return;
            }

            var result = await EnterpriseService.CreateAsync(enterpriseId.Value, _model);
            if (result.Success)
            {
                Snackbar.Add("Vaga criada com sucesso!", Severity.Success);
                Nav.NavigateTo("/empresa/home");
            }
            else
            {
                Snackbar.Add($"Falha ao criar vaga: {result.Error}", Severity.Error);
            }
        }
        finally
        {
            _busy = false;
        }
    }
}
