// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlataformaEstagios.Infrastructure.DataAccess;

#nullable disable

namespace PlataformaEstagios.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250902143838_AddingMoreCollsToVacancyTable")]
    partial class AddingMoreCollsToVacancyTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("AddressIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("CEP")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<Guid?>("CandidateIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Complement")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid?>("EnterpriseIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Street")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateIdentifier")
                        .IsUnique();

                    b.HasIndex("EnterpriseIdentifier")
                        .IsUnique();

                    b.ToTable("Addresses", null, t =>
                        {
                            t.HasCheckConstraint("CK_Addresses_Owner", "(\"CandidateIdentifier\" IS NOT NULL AND \"EnterpriseIdentifier\" IS NULL) OR (\"CandidateIdentifier\" IS NULL AND \"EnterpriseIdentifier\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.Candidate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid>("CandidateIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("CourseName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserIdentifier")
                        .IsUnique();

                    b.ToTable("Candidates", (string)null);
                });

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.Enterprise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ActivityArea")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid>("EnterpriseIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("EnterpriseName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserIdentifier")
                        .IsUnique();

                    b.ToTable("Enterprises", (string)null);
                });

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.Vacancy", b =>
                {
                    b.Property<Guid>("VacancyIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("EnterpriseIdentifier")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("JobFunction")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequiredSkillsCsv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VacancyIdentifier");

                    b.ToTable("Vacancies", (string)null);
                });

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.Address", b =>
                {
                    b.HasOne("PlataformaEstagios.Domain.Entities.Candidate", null)
                        .WithOne("Address")
                        .HasForeignKey("PlataformaEstagios.Domain.Entities.Address", "CandidateIdentifier")
                        .HasPrincipalKey("PlataformaEstagios.Domain.Entities.Candidate", "CandidateIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlataformaEstagios.Domain.Entities.Enterprise", null)
                        .WithOne("Address")
                        .HasForeignKey("PlataformaEstagios.Domain.Entities.Address", "EnterpriseIdentifier")
                        .HasPrincipalKey("PlataformaEstagios.Domain.Entities.Enterprise", "EnterpriseIdentifier")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.Candidate", b =>
                {
                    b.HasOne("PlataformaEstagios.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("PlataformaEstagios.Domain.Entities.Candidate", "UserIdentifier")
                        .HasPrincipalKey("PlataformaEstagios.Domain.Entities.User", "UserIdentifier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.Enterprise", b =>
                {
                    b.HasOne("PlataformaEstagios.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("PlataformaEstagios.Domain.Entities.Enterprise", "UserIdentifier")
                        .HasPrincipalKey("PlataformaEstagios.Domain.Entities.User", "UserIdentifier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("PlataformaEstagios.Domain.Entities.Enterprise", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
