@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@using PlataformaEstagio.Web.Components.Services.Auth
@inject PlataformaEstagio.Web.Components.Services.Auth.IAuthService Auth
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager Nav

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Color="Color.Primary" Fixed="false">
        <MudText Typo="Typo.h6">StartCarreira</MudText>
        <MudSpacer />

        <AuthorizeView>
            <NotAuthorized>
                <MudButton Variant="Variant.Text" Color="Color.Inherit"
                           StartIcon="@Icons.Material.TwoTone.Login"
                           OnClick="@(() => Nav.NavigateTo("/"))">
                    Sign In
                </MudButton>
            </NotAuthorized>

            <Authorized Context="auth">
                <MudText Class="mr-2">@GetDisplayName(auth.User)</MudText>

                <MudMenu Dense Variant="Variant.Text" Size="Size.Medium" Color="Color.Inherit"
                         Icon="@Icons.Material.TwoTone.MoreVert">

                    <MudMenu StartIcon="@Icons.Material.TwoTone.Settings"
                             IconColor="Color.Primary"
                             Label="Settings">
                        <MudMenuItem Icon="@Icons.Material.TwoTone.DarkMode"
                                     IconColor="Color.Secondary"
                                     OnClick="@DarkModeToggle"
                                     Label="Dark Theme" />
                    </MudMenu>

                    <MudDivider />

                    @if (auth.User.IsInRole("Candidate"))
                    {
                        <MudMenuItem Icon="@Icons.Material.Filled.Work"
                                     Label="Minhas vagas"
                                     OnClick="@(() => Nav.NavigateTo("/candidato/home"))" />
                    }

                    @if (auth.User.IsInRole("Enterprise"))
                    {
                        <MudMenuItem Icon="@Icons.Material.Filled.Dashboard"
                                     Label="Painel da empresa"
                                     OnClick="@(() => Nav.NavigateTo("/empresa/home"))" />
                    }

                    <MudDivider />

                    <MudMenuItem Icon="@Icons.Material.TwoTone.Logout"
                                 IconColor="Color.Primary"
                                 Label="Sign Out"
                                 OnClick="Logout" />
                </MudMenu>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    @* <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">StartCarreira</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar> *@
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="pt-16 pa-4">
        @Body
    </MudMainContent>
    <!-- Footer -->
    <footer class="app-footer">

        <div class="footer-left">© @DateTime.Now.Year Sarah Dine dos Santos Pereira</div>
        <div class="footer-right">
            <MudStack Row="true">
                <MudLink Href="/termos">Termos</MudLink>
                
                <MudLink Href="/privacidade">Privacidade</MudLink>
                
                <MudLink Href="/contato">Contato</MudLink>
            </MudStack>
            
        </div>
    </footer>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<style>
    .app-footer {
        display: flex;
        direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        border-top: 1px solid rgba(0,0,0,.08);
        background: var(--mud-palette-surface); /* respeita tema */
        width: 100%;
        bottom: 0;
        left: 0;
        position: fixed; /* importante p/ ser “sticky” e não flutuante */
        z-index: 1000;
    }

    .footer-left {
        font-size: .875rem;
        color: var(--mud-palette-text-secondary);
    }

    .footer-right a {
        margin-left: 8px;
    }
</style>

@code {
    private bool _drawerOpen = false;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;

    private async Task Logout() => await Auth.LogoutAsync();

    // Usa Name ou um claim "nickname" se existir
    private static string GetDisplayName(ClaimsPrincipal user)
        => user.FindFirst("nickname")?.Value
           ?? user.Identity?.Name
           ?? user.FindFirst(ClaimTypes.Email)?.Value
           ?? "Usuário";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AuthStateProvider is JwtAuthenticationStateProvider jwt)
        {
            await jwt.RestoreAsync();   // aqui o JS interop já está habilitado
            //StateHasChanged();          // refaz o render já autenticado
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Primary = "#0a66c2", // Azul estilo LinkedIn
        PrimaryDarken = "#004182",
        PrimaryLighten = "#e5f0fb",
        Secondary = "#0056a0",
        AppbarBackground = "#ffffff",
        AppbarText = "#2c2c2c",
        Background = "#f3f6f9",
        Surface = "#ffffff",
        DrawerBackground = "#ffffff",
        DrawerText = "#2c2c2c",
        DrawerIcon = "#0a66c2",
        TextPrimary = "#2c2c2c",
        TextSecondary = "#4a4a4a",
        ActionDefault = "#0a66c2",
        ActionDisabled = "#9e9e9e",
        ActionDisabledBackground = "#e0e0e0",
        LinesDefault = "#e0e0e0",
        TableLines = "#f0f0f0",
        Divider = "#e0e0e0",
        Success = "#2e7d32",
        Warning = "#ed6c02",
        Error = "#d32f2f",
        Info = "#0288d1",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#0a66c2",
        PrimaryDarken = "#004182",
        PrimaryLighten = "#5b9bd5",
        Background = "#1a1a27",
        Surface = "#20202f",
        AppbarBackground = "#1a1a27",
        AppbarText = "#e0e0e0",
        DrawerBackground = "#1a1a27",
        DrawerText = "#e0e0e0",
        DrawerIcon = "#0a66c2",
        TextPrimary = "#ffffff",
        TextSecondary = "#c0c0c0",
        ActionDefault = "#0a66c2",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        LinesDefault = "#2f2f2f",
        TableLines = "#3a3a3a",
        Divider = "#33323e",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        Info = "#4a86ff",
        OverlayLight = "#1e1e2d80",
    };


    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}

