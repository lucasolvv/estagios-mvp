@page "/candidato/perfil/editar"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using PlataformaEstagio.Web.Components.Services.Candidate
@inject ICandidateService CandidateService
@inject IUserContext CurrentUser
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<MudContainer MaxWidth="MaxWidth.False" Class="px-6 py-4">
    <MudPaper Class="px-4 py-4">
        <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mb-3">
            Editar Perfil
        </MudText>

        @if (!_hydrated)
        {
            <MudStack AlignItems="AlignItems.Center" Class="py-6">
                <MudProgressCircular Indeterminate="true" />
                <MudText Color="Color.Secondary">Inicializando...</MudText>
            </MudStack>
        }
        else if (!_loaded)
        {
            <MudStack AlignItems="AlignItems.Center" Class="py-6">
                <MudProgressCircular Indeterminate="true" />
                <MudText Color="Color.Secondary">Carregando perfil...</MudText>
            </MudStack>
        }
        else
        {
            <MudForm @ref="_form" Disabled="_busy">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_vm.FullName" Label="Nome" Required="true" />
                    </MudItem>

                    <MudItem xs="12" md="3">
                        <MudDatePicker Label="Data de Nascimento"
                                       @bind-Date="_vm.BirthDate"
                                       DateFormat="dd/MM/yyyy"
                                       Clearable="true" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_vm.Course" Label="Curso" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_vm.Address.Street" Label="Rua" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_vm.Address.Complement" Label="Complemento" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_vm.Address.Neighborhood" Label="Bairro" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_vm.Address.City" Label="Cidade" />
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudTextField @bind-Value="_vm.Address.Uf" Label="UF" MaxLength="2" />
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudTextField @bind-Value="_vm.Address.Cep" Label="CEP (8 dígitos)" MaxLength="8" />
                    </MudItem>

                    <!-- Foto -->
                    <MudItem xs="12" md="6" Class="mt-4">
                        <MudText Typo="Typo.subtitle1">Foto de Perfil</MudText>
                        <InputFile OnChange="OnPhotoSelected" accept="image/jpeg,image/png,image/webp" />
                        <MudText Typo="Typo.caption" Class="mt-1">Formatos: JPEG/PNG/WEBP. Máx 5MB.</MudText>

                        @if (!string.IsNullOrWhiteSpace(_imagePreview))
                        {
                            <div class="mt-2">
                                <img src="@_imagePreview" alt="Preview" style="max-width:220px;border-radius:8px;" />
                            </div>
                        }
                        else if (!string.IsNullOrWhiteSpace(_currentPublicPhoto))
                        {
                            <div class="mt-2">
                                <img src="@_currentPublicPhoto" alt="Atual" style="max-width:220px;border-radius:8px;" />
                            </div>
                        }
                    </MudItem>

                    <!-- Currículo -->
                    <MudItem xs="12" md="6" Class="mt-4">
                        <MudText Typo="Typo.subtitle1">Currículo (PDF)</MudText>
                        <InputFile OnChange="OnResumeSelected" accept="application/pdf" />
                        <MudText Typo="Typo.caption" Class="mt-1">Apenas PDF. Máx 5MB.</MudText>

                        @if (!string.IsNullOrWhiteSpace(_resumeSelectedName))
                        {
                            <MudAlert Severity="Severity.Info" Class="mt-2">
                                PDF anexado: @_resumeSelectedName
                            </MudAlert>
                        }
                    </MudItem>

                    <MudItem xs="12" Class="mt-6">
                        <MudStack Row Spacing="2">
                            <MudButton Color="Color.Primary"
                                       OnClick="SaveAsync"
                                       Disabled="_busy">
                                @if (_busy)
                                {
                                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" />
                                }
                                Salvar
                            </MudButton>

                            <MudButton Variant="Variant.Text"
                                       Disabled="_busy"
                                       OnClick="@(() => Nav.NavigateTo("/candidato/home"))">
                                Cancelar
                            </MudButton>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudForm>
        }
    </MudPaper>
</MudContainer>

@code {
    private MudForm? _form;
    private bool _busy;
    private bool _loaded;
    private bool _hydrated;

    private Guid _candidateId;

    private readonly long MaxImageBytes = 5 * 1024 * 1024;
    private readonly long MaxPdfBytes = 5 * 1024 * 1024;

    private EditVm _vm = new();
    private string? _imagePreview;        // data URI
    private string? _resumeSelectedName;  // exibição
    private string? _currentPublicPhoto;  // ProfilePicturePath do GET

    protected override Task OnInitializedAsync() => Task.CompletedTask;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_hydrated && firstRender)
        {
            _hydrated = true;

            await CurrentUser.RefreshAsync(); // hidrata token/claims

            if (!CurrentUser.IsAuthenticated)
            {
                Snackbar.Add("Sessão expirada. Faça login novamente.", Severity.Error);
                Nav.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Seu padrão: CandidateId fica em UserTypeId quando Role = Candidate
            if (CurrentUser.UserTypeId is Guid cid && cid != Guid.Empty)
                _candidateId = cid;
            else
            {
                Snackbar.Add("ID do candidato não encontrado nas claims.", Severity.Error);
                Nav.NavigateTo("/candidato/home");
                return;
            }

            await LoadAsync();
            _loaded = true;
            StateHasChanged();
        }
    }

    private async Task LoadAsync()
    {
        try
        {
            var dto = await CandidateService.GetByIdAsync(_candidateId);
            _vm.FullName = dto.FullName;
            _vm.BirthDate = dto.BirthDate;
            _vm.Course = dto.Course;
            _vm.Address = dto.Address ?? new AddressDto();
            _currentPublicPhoto = dto.ProfilePicturePath;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Falha ao carregar perfil: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnPhotoSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file is null) return;

            var ct = file.ContentType?.ToLowerInvariant();
            if (ct is not ("image/jpeg" or "image/png" or "image/webp"))
            {
                Snackbar.Add("Imagem inválida. Use JPEG/PNG/WEBP.", Severity.Warning);
                return;
            }
            if (file.Size > MaxImageBytes)
            {
                Snackbar.Add("Imagem muito grande (máx 5MB).", Severity.Warning);
                return;
            }

            using var s = file.OpenReadStream(MaxImageBytes);
            using var ms = new MemoryStream();
            await s.CopyToAsync(ms);
            var b64 = Convert.ToBase64String(ms.ToArray());
            _imagePreview = $"data:{file.ContentType};base64,{b64}";

            // Prepara para envio
            _vm.ProfilePictureBase64 = _imagePreview;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Falha ao processar a imagem: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnResumeSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file is null) return;

            if (!string.Equals(file.ContentType, "application/pdf", StringComparison.OrdinalIgnoreCase))
            {
                Snackbar.Add("Anexe apenas PDF.", Severity.Warning);
                return;
            }
            if (file.Size > MaxPdfBytes)
            {
                Snackbar.Add("PDF muito grande (máx 5MB).", Severity.Warning);
                return;
            }

            using var s = file.OpenReadStream(MaxPdfBytes);
            using var ms = new MemoryStream();
            await s.CopyToAsync(ms);
            var b64 = Convert.ToBase64String(ms.ToArray());
            _vm.ResumeBase64 = $"data:application/pdf;base64,{b64}";
            _resumeSelectedName = file.Name;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Falha ao processar o PDF: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveAsync()
    {
        await _form!.Validate();

        // Validações mínimas front (backend segue validando)
        if (string.IsNullOrWhiteSpace(_vm.FullName))
        {
            Snackbar.Add("Nome é obrigatório.", Severity.Warning);
            return;
        }
        if (!string.IsNullOrWhiteSpace(_vm.Address?.Uf) && _vm.Address!.Uf!.Length != 2)
        {
            Snackbar.Add("UF deve ter 2 letras.", Severity.Warning); return;
        }
        if (!string.IsNullOrWhiteSpace(_vm.Address?.Cep) && _vm.Address!.Cep!.Length != 8)
        {
            Snackbar.Add("CEP deve ter 8 dígitos (apenas números).", Severity.Warning); return;
        }

        _busy = true;
        try
        {
            var payload = new RequestUpdateCandidateProfileJson
            {
                FullName = _vm.FullName,
                BirthDate = _vm.BirthDate,
                Course = _vm.Course,
                Address = _vm.Address,
                ProfilePictureBase64 = _vm.ProfilePictureBase64, // null se não trocou
                ResumeBase64 = _vm.ResumeBase64                  // null se não anexou
            };

            var (ok, err) = await CandidateService.UpdateProfileAsync(_candidateId, payload);
            if (!ok)
            {
                Snackbar.Add(string.IsNullOrWhiteSpace(err) ? "Falha ao atualizar o perfil." : err, Severity.Error);
                return;
            }

            Snackbar.Add("Perfil atualizado com sucesso!", Severity.Success);

            // Recarrega para pegar ProfilePicturePath atualizado do backend
            await LoadAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar: {ex.Message}", Severity.Error);
        }
        finally
        {
            _busy = false;
        }
    }

    private sealed class EditVm
    {
        public string? FullName { get; set; }
        public DateTime? BirthDate { get; set; }
        public string? Course { get; set; }
        public AddressDto Address { get; set; } = new();
        public string? ProfilePictureBase64 { get; set; }
        public string? ResumeBase64 { get; set; }
    }
}
